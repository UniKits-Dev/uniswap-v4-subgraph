type ContractStat @entity {
  # contract address
  id: ID!
  # amount of pools created
  poolCnt: BigInt!
  # amoutn of transactions all time
  txCnt: BigInt!
  modifyPositionCnt: BigInt!
  swapCnt: BigInt!
  # total liquidity
  totalLiquidity: BigInt!

  # current owner of the factory
  owner: ID!
}

type Pool @entity {
  # poolKey
  id: ID!
  poolKey: Bytes!
  currency0: Bytes!
  currency1: Bytes!
  fee: Int!
  tickSpacing: Int!
  hookAddress: Bytes!
  txCnt: BigInt!
  liquidity: BigInt!
  sqrtPriceX96: BigInt!
}

type Swap @entity {
  # transaction hash + "-" + index in swaps Transaction array
  id: ID!
  poolKey: Bytes!
  currency0: Bytes!
  currency1: Bytes!
  transaction: Transaction!

  # populated from the Swap event
  sender: Bytes!
  liquidity: BigInt!
  sqrtPriceX96: BigInt!
  amount0Delta: BigInt!
  amount1Delta: BigInt!
  logIndex: BigInt
}

type Position @entity {
  id: ID!
  poolKey: Bytes!
  currency0: Bytes!
  currency1: Bytes!
  transaction: Transaction!

  # populated from the ModifyPosition event
  sender: Bytes!
  liquidity: BigInt!
  sqrtPriceX96: BigInt!
  logIndex: BigInt
}

type Transaction @entity {
  # txn hash
  id: ID!
  # block txn was included in
  blockNumber: BigInt!
  # timestamp txn was confirmed
  timestamp: BigInt!
  # gas used during txn execution
  gasLimit: BigInt!
  gasPrice: BigInt!
  from: Bytes!
  to: Bytes
  # derived values
  position: [Position]! @derivedFrom(field: "transaction")
  swap: [Swap]! @derivedFrom(field: "transaction")
}
